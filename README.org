#+TITLE: Dotfiles
#+DATE: <2019-04-13 Sat>
#+AUTHOR: Rodrigo Leite
#+EMAIL: rodrigo@leite.dev
#+LANGUAGE: en
#+CREATOR: Emacs 26.1 (Org mode 9.2.2)

#+EXPORT_FILE_NAME: docs/index.html

Hi. Welcome to my dotfiles.

The purpose of this README is to generate most (if not all) of my configuration
files automatically. This is done using org mode as a templating engine,
compiled through simple elisp code and org-tangle.

* Dependencies

These should hopefully be auto-installed with a script in the future. In the
meantime, they're listed here for convenience.

- [[https://github.com/lupoDharkael/flameshot][Flameshot]]
- [[https://github.com/streamlink/streamlink][Streamlink]]
- [[https://github.com/Airblader/i3][i3-gaps]]
- [[https://github.com/GiedriusS/TwitchNotifier][TwitchNotifier]]
- Compton
- setxkbmap
- dunst
- nm-applet
- tint2
- rofi
- pactl
- mpv

* i3

** Constants

#+MACRO: mod Mod4
#+MACRO: lockscreen i3-lock-fancy
#+MACRO: xrandrLayouts ~/.dotfiles/xrandr/layouts/
#+MACRO: wallpapers ~/Pictures/Wallpapers
#+MACRO: touchpad 'DELL0829:00 06CB:7E92 Touchpad'
#+MACRO: scriptsDir ~/.dotfiles/scripts

- Mod key: {{{mod}}}
- Locksceren command: {{{lockscreen}}}
- Directory with XRandr layouts: {{{xrandrLayouts}}}
- Wallpaper directory: {{{wallpapers}}}
- Touchpad name (for xinput): {{{touchpad}}}
- Scripts directory: {{{scriptsDir}}}

** Config

#+NAME: config-table
| Configuration     | Value                    | Description                                  |
|-------------------+--------------------------+----------------------------------------------|
| font              | pango:DejaVu Sans Mono 8 | Sets font                                    |
| floating_modifier | {{{mod}}}                | Use Mouse+{{{mod}}} to drag floating windows |
| new_window        | 1pixel                   |                                              |
| gaps              | inner 10                 | Sets gap size (i3-gaps only)                 |

#+NAME: config-table-generator
#+BEGIN_SRC emacs-lisp :var table=config-table :results output :exports results
(dolist (row table)
  (princ (format "%s %s\n" (nth 0 row) (nth 1 row))))
#+END_SRC

** Keybinds

*** Navigation and i3 stuff
#+NAME: navigation-table
| Keybind               | Command                                      | Is Exec | Action                                           |
|-----------------------+----------------------------------------------+---------+--------------------------------------------------|
| {{{mod}}}+Return      | i3-sensible-terminal                         | t       | Opens a new terminal                             |
| {{{mod}}}+Shift+q     | kill                                         | nil     | Kills the focused window                         |
| {{{mod}}}+d           | rofi -combi-modi window,drun,ssh -show combi | t       | Runs rofi in combined mode                       |
| {{{mod}}}+h           | focus left                                   | nil     |                                                  |
| {{{mod}}}+j           | focus down                                   | nil     |                                                  |
| {{{mod}}}+k           | focus up                                     | nil     |                                                  |
| {{{mod}}}+l           | focus right                                  | nil     |                                                  |
| {{{mod}}}+Shift+h     | move left                                    | nil     |                                                  |
| {{{mod}}}+Shift+j     | move down                                    | nil     |                                                  |
| {{{mod}}}+Shift+k     | move up                                      | nil     |                                                  |
| {{{mod}}}+Shift+l     | move right                                   | nil     |                                                  |
| {{{mod}}}+b           | split h                                      | nil     | Splits horizontally                              |
| {{{mod}}}+v           | split v                                      | nil     | Splits vertically                                |
| {{{mod}}}+f           | fullscreen toggle                            | nil     | Toggles fullscreen mode for the focused window   |
| {{{mod}}}+s           | layout stacking                              | nil     | Sets layout to stacking                          |
| {{{mod}}}+w           | layout tabbed                                | nil     | Sets layout to tabbed                            |
| {{{mod}}}+e           | layout toggle split                          | nil     | Toggles layout to split                          |
| {{{mod}}}+Shift+space | floating toggle                              | nil     | Toggles floating for the current window          |
| {{{mod}}}+space       | focus mode_toggle                            | nil     | Change focus between tiling and floating windows |
| {{{mod}}}+a           | focus parent                                 | nil     | Focuses the parent window                        |
| {{{mod}}}+Shift+c     | reload                                       | nil     | Reloads the configuration file                   |
| {{{mod}}}+Shift+r     | restart                                      | nil     | Restarts i3 in place                             |
| {{{mod}}}+r           | mode "resize"                                | nil     | Toggles resize mode                              |

#+NAME: navigation-table-generator
#+BEGIN_SRC emacs-lisp :var table=navigation-table :results output :exports results
(dolist (row table)
  (princ (format "bindsym %s%s %s\n"
                 (nth 0 row)
                 (if (string= "t" (nth 2 row))
                     " exec --no-startup-id"
                     "")
                 (if (string= "t" (nth 2 row)) (format "\"%s\"" (nth 1 row)) (nth 1 row)))))
#+END_SRC

*** Workspaces
#+NAME: workspaces-table
| Keybind    | Command   | Action                |
|------------+-----------+-----------------------|
| {{{mod}}}+ | workspace | Switches to workspace |

#+NAME: workspaces-table-generator
#+BEGIN_SRC emacs-lisp :var table=workspaces-table :results output :exports results
(let ((num 0))
  (while (< num 10)
    (setq num (+ num 1))
    (princ (format "bindsym %s%d %s %d\n" (nth 0 (nth 0 table)) num (nth 1 (nth 0 table)) num))
    (princ (format "bindsym %sShift+%d move to %s %d\n" (nth 0 (nth 0 table)) num (nth 1 (nth 0 table)) num))
))

#+END_SRC

*** Shortcuts
#+NAME: shortcuts-table
| Keybind              | Command                               | Action                               |
|----------------------+---------------------------------------+--------------------------------------|
| Print                | flameshot gui                         | Starts flameshot in gui mode         |
| XF86AudioMute        | amixer -q -D pulse sset Master toggle | Toggles mute                         |
| XF86AudioLowerVolume | pactl set-sink-volume 0 -5%           | Lowers volume by 5%                  |
| XF86AudioRaiseVolume | pactl set-sink-volume 0 +5%           | Raises volume by 5%                  |
| XF86AudioPlay        | mpc toggle                            | Plays / pauses on mpc                |
| XF86AudioNext        | mpc next                              | Next track on mpc                    |
| XF86AudioPrev        | mpc prev                              | Previous track on mpc                |
| {{{mod}}}+x          | ~/.emacs.d/bin/org-capture            | Org-capture                          |
| {{{mod}}}+p          | {{{lockscreen}}}                      | Starts the lockscreen                |
| {{{mod}}}+t          | {{{scriptsDir}}}/rofi-twitch          | Runs rofi as a Twitch channel picker |

#+NAME: shortcuts-table-generator
#+BEGIN_SRC emacs-lisp :var table=shortcuts-table :results output :exports results
(dolist (row table)
  (princ (format "bindsym %s exec --no-startup-id %s\n" (nth 0 row) (nth 1 row))))
#+END_SRC

** Autostart Commands

#+NAME: autostart-table
| Command                                                     | Runs Always | Startup ID | Description                 |
|-------------------------------------------------------------+-------------+------------+-----------------------------|
| xinput set-prop {{{touchpad}}} 'libinput Tapping Enabled' 1 | nil         | nil        | Enables tapping             |
| setxkbmap -option caps:swapescape                           | nil         | nil        | Swaps caps lock with escape |
| compton --config ~/.config/i3/compton.conf -b               | nil         | nil        | Starts compton              |
| dunst                                                       | nil         | nil        | Notification manager        |
| xset +fp ~/.fonts                                           | nil         | nil        | Loads fonts                 |
| xset fp rehash                                              | nil         | nil        |                             |
| feh --bg-max --randomize {{{wallpapers}}}* &                | t           | nil        | Loads a random wallpaper    |
| ~/.dotfiles/xrandr/apply.sh {{{xrandrLayouts}}}             | t           | t          | Loads xrandr layouts        |
| flameshot                                                   | nil         | nil        | Screenshot tool             |
| nm-applet                                                   | nil         | nil        | Network Manager applet      |
| tint2                                                       | nil         | nil        | Application bar             |

#+NAME: autostart-table-generator
#+BEGIN_SRC emacs-lisp :var table=autostart-table :results output :exports results
(dolist (row table)
  (princ (format "exec%s%s %s\n"
                 (if (string= "t" (nth 1 row)) "_always" "")
                 (if (string= "nil" (nth 2 row)) " --no-startup-id" "")
                 (nth 0 row)
                 )))
#+END_SRC
** Window Settings

#+NAME: window-table
| Query                      | Setting                        |
|----------------------------+--------------------------------|
| [instance="^org-capture$"] | floating enable                |
| [instance="^twitchPopup$"] | floating enable, sticky enable |

#+NAME: window-table-generator
#+BEGIN_SRC emacs-lisp :var table=window-table :results output :exports results
(dolist (row table)
  (princ (format "for_window %s %s\n" (nth 0 row) (nth 1 row))))
#+END_SRC

** Extra

This is stuff that doesn't translate very well into literate programming :(

#+NAME: extra
#+BEGIN_SRC text
#Resize mode
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
#+END_SRC

** Output

#+BEGIN_SRC text :noweb yes :tangle config/i3/config
# Config
<<config-table-generator()>>

# Keybinds
## Navigation
<<navigation-table-generator()>>

## Workspaces
<<workspaces-table-generator()>>

## Shortcuts
<<shortcuts-table-generator()>>

# Autostart
<<autostart-table-generator()>>

# Window settings
<<window-table-generator()>>

# Extra
<<extra>>
#+END_SRC

* Emacs
:PROPERTIES:
:header-args: :tangle config/doom.d/config.el
:END:

Some of this stuff might be specific to [[https://github.com/hlissner/doom-emacs][Doom Emacs]], like the =(!after)= macro.
Feel free to adapt things to your needs if you use a different distribution of Emacs.

** Custom Bindings

#+BEGIN_SRC emacs-lisp
;; Custom bindings
(map! :leader
      :prefix ("o" . "open")
       :when (featurep! :tools vterm)
       :desc "Terminal"          "T" #'+vterm/open
       :desc "Terminal in popup" "t" #'+vterm/open-popup-in-project)
#+END_SRC

** Configuration Variables

*** Typescript / Javascript

**** Enable TSX files to be parsed with web-mode

#+BEGIN_SRC emacs-lisp
(after! web-mode
(after! tide
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
            (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode))
)
#+END_SRC

**** Set node-js executable path
#+BEGIN_SRC emacs-lisp
;; Node executable path
(setq exec-path (append exec-path '("~/.nvm/versions/node/v10.15.3/bin")))
#+END_SRC

*** Company-Complete

#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 3))
#+END_SRC

*** Org Mode

**** Org Publish

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
(setq org-publish-project-alist
      '(
            ("org-notes"
                :base-directory "~/Repos/blog"
                :base-extension "org"
                :publishing-directory "~/public_html/"
                :recursive t
                :publishing-function org-html-publish-to-html
                :headline-levels 4             ; Just the default for this project.
                :auto-preamble t
            )

            ("org-static"
                :base-directory "~/Repos/blog"
                :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
                :publishing-directory "~/public_html/"
                :recursive t
                :publishing-function org-publish-attachment
            )

            ("org" :components ("org-notes" "org-static"))
      ))
#+END_SRC

**** Org Capture Templates

#+BEGIN_SRC emacs-lisp
;; Org capture templates
(after! org-capture
  (add-to-list 'org-capture-templates
               '("s" "Song" entry (file+headline "~/org/bookmarks.org" "Music")
                 "* TODO %x"))
  )
#+END_SRC

**** Org Babel

***** Hook to resolve macros when tangling
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'org-babel-pre-tangle-hook
          (lambda () (org-macro-replace-all (org-macro--collect-macros))))
#+END_SRC

***** Interactive function to tangle without changing the source file
#+BEGIN_SRC emacs-lisp :results none
(defun org-tangle-without-saving ()
  (interactive)
  (cl-letf (((symbol-function 'save-buffer) #'ignore))
    (org-babel-tangle (buffer-file-name))
  )
  (undo-tree-undo))
#+END_SRC
